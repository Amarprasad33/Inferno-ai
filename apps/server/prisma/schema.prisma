// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  email String @unique

  name          String?
  password      String?
  passwordHash  String? // used when providerId = "credential"
  image         String?
  emailVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  canvases Canvas[]
  apiKeys  ApiKey[]

  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  conversations      Conversation[]
}

// New: sessions
model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// New: accounts (providers + credentials)
model Account {
  id             String  @id @default(uuid())
  accountId      String  @unique
  userId         String
  providerId     String // "credential", "google"
  providerUserId String? // id from provider (null for "credential")
  passwordHash   String? // used when providerId = "credential"
  password       String?

  accessToken  String?
  refreshToken String?
  idToken      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([providerId, providerUserId])
  @@unique([userId, providerId])
}

model Canvas {
  id            String         @id @default(uuid())
  ownerId       String
  title         String         @default("Untitled Canvas")
  createdAt     DateTime       @default(now())
  owner         User           @relation(fields: [ownerId], references: [id])
  nodes         Node[]
  conversations Conversation[]
}

model Node {
  id        String    @id @default(uuid())
  canvasId  String
  label     String    @default("Chat")
  provider  String
  model     String
  createdAt DateTime  @default(now())
  canvas    Canvas    @relation(fields: [canvasId], references: [id])
  messages  Message[]
}

model ApiKey {
  id              String   @id @default(uuid())
  userId          String
  provider        String
  encryptedSecret String
  iv              String
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, provider], map: "user_provider_unique")
}

model Conversation {
  id        String    @id @default(uuid())
  userId    String
  canvasId  String?
  title     String    @default("Untitled")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user     User      @relation(fields: [userId], references: [id])
  canvas   Canvas?   @relation(fields: [canvasId], references: [id])
  messages Message[]

  @@index([userId])
  @@index([canvasId])
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  nodeId         String
  role           String
  contentEnc     String
  iv             String
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  node         Node         @relation(fields: [nodeId], references: [id])
}

// New: verification tokens (email verify + password reset)
enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model VerificationToken {
  id        String           @id @default(uuid())
  userId    String?
  token     String           @unique
  type      VerificationType
  expiresAt DateTime
  createdAt DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id])
}
